# staging_transformation.dig - LOOP-BASED PROCESSING
timezone: UTC
_export:
  !include : config/src_params.yml
  td:
    database: ${source_database}

+setup:
  echo>: "Starting optimized incremental staging transformation for ${source_database}"

# CRITICAL: Create inc_log table if not exists
+create_inc_log:
  td>:
  query: |
    CREATE TABLE IF NOT EXISTS ${lkup_db}.inc_log(
        table_name VARCHAR, inc_value BIGINT, project_name VARCHAR
    )
  database: ${staging_database}

# ENHANCED: Dependency-aware table processing
+dependency_wave_execution:
  for_each>:
    wave: ${dependency_groups}
  _do:
    +wave_processing:
      echo>: "Processing dependency wave: ${wave.group} (depends on: ${wave.depends_on})"

      # Execute all tables in current wave (parallel if wave.parallel = true)
      +wave_table_transformations:
        _parallel: ${wave.parallel}
        for_each>:
          table: ${wave.tables}
        _do:
          +table_transformation:

            # Check if staging table exists
            +check_table:
              td>:
              query: |
                SELECT COUNT(*) as table_exists
                FROM information_schema.tables
                WHERE table_schema = '${staging_database}'
                AND table_name = '${table.staging_table}'
              store_last_results: true
              database: ${staging_database}

            # Conditional processing based on table existence
            +conditional_processing:
              if>: ${td.last_results.table_exists == 0 || table.mode == 'full'}

              # INITIAL LOAD: Full table processing (first time)
              _do:
                +initial_load:
                  echo>: "Performing INITIAL load for ${table.staging_table} (table not exists)"

                +transform_initial:
                  td>: init_queries/${table.source_db}_${table.name}_init.sql
                  database: ${staging_database}
                  create_table: ${table.staging_table}

                +log_initial_progress:
                  td>:
                  query: |
                    INSERT INTO ${lkup_db}.inc_log
                    SELECT '${table.name}' as table_name,
                           COALESCE(MAX(time), 0) as inc_value,
                           'staging' as project_name
                    FROM ${table.source_db}.${table.name}
                  database: ${staging_database}

              # INCREMENTAL LOAD: Process only new records
              _else_do:
                +incremental_load:
                  echo>: "Performing INCREMENTAL load for ${table.staging_table} (table exists)"

                # Standard incremental transformation
                +transform_incremental:
                  if>: ${table.has_dedup}
                  _do:
                    +run_work:
                      td>: queries/${table.source_db}_${table.name}.sql
                      database: ${staging_database}
                      insert_into: work_${table.staging_table}
                  _else_do:
                    +run:
                      td>: queries/${table.source_db}_${table.name}.sql
                      database: ${staging_database}
                      insert_into: ${table.staging_table}

                # Conditional upsert task (only if deduplication exists)
                +transform_upsert:
                  if>: ${table.has_dedup}
                  _do:
                    +run:
                      td>: queries/${table.source_db}_${table.name}_upsert.sql
                      database: ${staging_database}

                # Log incremental progress
                +log_incremental_progress:
                  td>:
                  query: |
                    INSERT INTO ${lkup_db}.inc_log
                    SELECT '${table.name}' as table_name,
                           COALESCE(MAX(time), 0) as inc_value,
                          'staging' as project_name
                    FROM ${table.source_db}.${table.name}
                  database: ${staging_database}

                # Cleanup work table (only if deduplication exists)
                +drop_work_tbl:
                  if>: ${table.has_dedup}
                  _do:
                    +drop_tables:
                      td_ddl>:
                      drop_tables: ["work_${table.staging_table}"]
                      database: ${staging_database}

+completion:
  echo>: "Optimized incremental staging transformation completed successfully for ALL tables"

# Call the error wf
_error:
  +email_alert:
    require>: email_error
    project_name: email_notification_alert
    rerun_on: all
    params:
      wf_name: staging_transformation.dig
      wf_session_id: ${session_id}
      wf_attempt_id: ${attempt_id}
      wf_project_id: ${project_id}
      error_msg: ${error.message}
